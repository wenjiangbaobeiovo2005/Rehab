name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        # Use pip version < 24.1 for compatibility with older Kivy versions
        pip install "pip<24.1"
        pip install Cython==0.29.33
        pip install -r requirements.txt
        pip install buildozer
    
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential libffi-dev libssl-dev python3-dev python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev
        sudo apt install -y git zip unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev
    
    - name: Install Android SDK
      run: |
        export ANDROID_HOME=$HOME/android-sdk
        mkdir -p $ANDROID_HOME
        cd $ANDROID_HOME
        wget https://dl.google.com/android/repository/commandlinetools-linux-6514223_latest.zip
        unzip commandlinetools-linux-6514223_latest.zip
        # Check the actual directory structure after extraction
        ls -la
        # Create cmdline-tools/latest directory structure
        mkdir -p cmdline-tools/latest
        # Move the contents to the correct location
        if [ -d "cmdline-tools" ]; then
          # If there's a cmdline-tools directory with contents
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        else
          # If tools were extracted directly
          mv * cmdline-tools/latest/ 2>/dev/null || true
        fi
        # Ensure we have the right structure
        ls -la cmdline-tools/
        ls -la cmdline-tools/latest/
    
    - name: Accept Android SDK licenses
      run: |
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        # Ensure sdkmanager exists
        ls -la $ANDROID_HOME/cmdline-tools/latest/bin/
        mkdir -p $HOME/.android
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $HOME/.android/repositories.cfg
        echo "84831b9409646a918e30573bab4c9c91346d8abd" >> $HOME/.android/repositories.cfg
        # Accept licenses using full path to sdkmanager
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
    
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_ENV
    
    - name: Build APK with Buildozer
      run: |
        buildozer android debug
    
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: rehabgpt-apk
        path: bin/*.apk
        if-no-files-found: warn