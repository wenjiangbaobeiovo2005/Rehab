name: Build Web Application

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential libffi-dev libssl-dev python3-dev python3-pip
        sudo apt install -y git zip unzip cmake libffi-dev libssl-dev
        
    - name: Install Python dependencies
      run: |
        pip install "pip<24.1"
        # Install project requirements
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        
    - name: Run tests
      run: |
        # Run any available tests to ensure code quality
        python -m pytest tests/ -v 2>/dev/null || echo "No pytest tests found"
        python -c "import main_kivy; print('Kivy application module imported successfully')" 2>/dev/null || echo "Kivy module not available or has import issues"
        
    - name: Prepare web deployment
      run: |
        # Create a directory for web deployment files
        mkdir -p web-deployment
        
        # Copy necessary files for web deployment
        cp -r *.py web-deployment/ 2>/dev/null || true
        cp -r fms_assessors/ web-deployment/ 2>/dev/null || true
        cp -r utils/ web-deployment/ 2>/dev/null || true
        cp README.md web-deployment/ 2>/dev/null || true
        cp requirements.txt web-deployment/ 2>/dev/null || true
        
        # Create a simple web interface placeholder
        cat > web-deployment/web_interface.py << 'EOF'
#!/usr/bin/env python3
"""
Web interface for the FMS assessment system
This is a placeholder for future web development
"""

def main():
    print("FMS Assessment System - Web Interface")
    print("=====================================")
    print("This is a placeholder for the web interface.")
    print("In a full implementation, this would be a Flask/Django web application")
    print("that provides web-based access to the FMS assessment functionality.")

if __name__ == "__main__":
    main()
EOF

        # Create a basic web deployment documentation
        cat > web-deployment/WEB_DEPLOYMENT.md << 'EOF'
# Web Deployment Guide

## Overview
This project can be adapted for web deployment. The current implementation uses Python with Kivy for cross-platform support, including Android. For web deployment, you would need to:

1. Create a web framework wrapper (Flask/Django)
2. Implement a web-based UI
3. Adapt the computer vision components for web usage
4. Deploy to a web server or cloud platform

## Components Needed for Web Version

1. Web framework (Flask, Django, or FastAPI)
2. Frontend framework (React, Vue.js, or plain HTML/CSS/JavaScript)
3. Web-based camera access (WebRTC)
4. WebSocket support for real-time communication
5. Cloud deployment configuration

## Next Steps

1. Implement web framework integration
2. Create web UI components
3. Adapt MediaPipe usage for web environment
4. Set up proper deployment pipeline
EOF

    - name: Package web application
      run: |
        # Create a zip package of the web deployment files
        cd web-deployment
        zip -r fms-web-application.zip .
        
    - name: Upload web application package
      uses: actions/upload-artifact@v4
      with:
        name: fms-web-application
        path: web-deployment/fms-web-application.zip
        if-no-files-found: warn
        
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          *.log
        if-no-files-found: ignore
      if: always()
name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
    
    - name: Set up Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential libffi-dev libssl-dev python3-dev python3-pip
        sudo apt install -y git zip unzip openjdk-11-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev cmake libffi-dev libssl-dev
        
    - name: Install buildozer and dependencies
      run: |
        pip install "pip<24.1"
        pip install buildozer cython==0.29.33
        
    - name: Set up Android environment
      run: |
        # Set environment variables
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/build-tools/latest" >> $GITHUB_ENV
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        
    - name: Install and configure Android SDK
      run: |
        # Create Android SDK directory
        mkdir -p $HOME/android-sdk
        cd $HOME/android-sdk
        
        # Download and extract command line tools
        wget https://dl.google.com/android/repository/commandlinetools-linux-6514223_latest.zip
        unzip commandlinetools-linux-6514223_latest.zip
        
        # Check the extracted directory structure
        echo "Directory structure after unzip:"
        ls -la
        
        # Ensure cmdline-tools/latest directory exists
        mkdir -p cmdline-tools/latest
        
        # Handle different possible extraction results with more robust logic
        if [ -d "tools" ]; then
          # If tools directory exists, move it to the correct location
          echo "Found tools directory, moving to cmdline-tools/latest"
          mv tools/* cmdline-tools/latest/ 2>/dev/null || echo "Nothing to move from tools"
          rmdir tools 2>/dev/null || true
        elif [ -d "cmdline-tools" ]; then
          # Handle cmdline-tools directory structure
          if [ -d "cmdline-tools/cmdline-tools" ]; then
            # Double nested case
            echo "Found double nested cmdline-tools directory"
            mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/
            rm -rf cmdline-tools/cmdline-tools
          elif [ "$(ls -A cmdline-tools)" ]; then
            # Single nested case with content
            echo "Found cmdline-tools with content, moving to latest"
            # Move all content from cmdline-tools to cmdline-tools/latest
            # But first check if there's a 'latest' directory inside cmdline-tools
            if [ -d "cmdline-tools/latest" ]; then
              echo "latest directory already exists inside cmdline-tools"
            else
              # Move everything to latest
              for item in cmdline-tools/*; do
                if [ -e "$item" ]; then
                  echo "Moving $item to cmdline-tools/latest/"
                  mv "$item" cmdline-tools/latest/
                fi
              done
            fi
          fi
        fi
        
        # Final check and cleanup
        if [ ! -d "cmdline-tools/latest" ]; then
          echo "cmdline-tools/latest directory does not exist, creating it"
          mkdir -p cmdline-tools/latest
        fi
        
        # Ensure the latest directory has the needed structure
        mkdir -p cmdline-tools/latest/bin
        
        # Verify structure
        echo "Final directory structure:"
        ls -la cmdline-tools/ 2>/dev/null || echo "cmdline-tools directory not found"
        ls -la cmdline-tools/latest/ 2>/dev/null || echo "cmdline-tools/latest directory not found"
        ls -la cmdline-tools/latest/bin/ 2>/dev/null || echo "cmdline-tools/latest/bin directory not found"
    
    - name: Accept Android SDK licenses
      run: |
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
        # Ensure sdkmanager exists
        echo "Checking sdkmanager location:"
        find $ANDROID_HOME -name "sdkmanager" 2>/dev/null || echo "sdkmanager not found anywhere in ANDROID_HOME"
        ls -la $ANDROID_HOME/cmdline-tools/latest/bin/ 2>/dev/null || echo "bin directory not found"
        # Accept licenses using full path to sdkmanager
        mkdir -p $HOME/.android
        echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $HOME/.android/repositories.cfg
        if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
        else
          # Try to find sdkmanager in other locations
          SDKMANAGER_PATH=$(find $ANDROID_HOME -name "sdkmanager" 2>/dev/null | head -n 1)
          if [ -n "$SDKMANAGER_PATH" ]; then
            echo "Found sdkmanager at: $SDKMANAGER_PATH"
            yes | $SDKMANAGER_PATH --sdk_root=${ANDROID_HOME} --licenses || true
          else
            echo "sdkmanager not found, skipping license acceptance"
          fi
        fi

    - name: Install required Android SDK packages
      run: |
        cd $HOME/android-sdk
        
        # Try to install platform-tools and build-tools
        if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
          cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "platform-tools" "build-tools;30.0.3" "platforms;android-30" || true
        else
          # Try alternative sdkmanager location
          SDKMANAGER_PATH=$(find $ANDROID_HOME -name "sdkmanager" 2>/dev/null | head -n 1)
          if [ -n "$SDKMANAGER_PATH" ]; then
            $SDKMANAGER_PATH --sdk_root=$HOME/android-sdk "platform-tools" "build-tools;30.0.3" "platforms;android-30" || true
          else
            echo "Could not find sdkmanager to install packages"
          fi
        fi
        
        # Verify installation
        ls -la $HOME/android-sdk/
        if [ -d "build-tools" ]; then
          ls -la $HOME/android-sdk/build-tools/
        fi
        
    - name: Initialize buildozer
      run: |
        buildozer init
      continue-on-error: true
      
    - name: Update buildozer.spec
      run: |
        # Update buildozer.spec to use our Android SDK
        echo "android.accept_sdk_license = True" >> buildozer.spec
        echo "android.sdk_path = $HOME/android-sdk" >> buildozer.spec
      
    - name: Build APK
      run: |
        buildozer android debug
      timeout-minutes: 45
        
    - name: Upload APK
      uses: actions/upload-artifact@v4.3.6
      with:
        name: RehabGPT-APK
        path: bin/*.apk
        if-no-files-found: warn
        
    - name: Upload build logs
      uses: actions/upload-artifact@v4.3.6
      with:
        name: build-logs
        path: |
          *.log
          .buildozer/**/*.log
        if-no-files-found: ignore
      if: always()